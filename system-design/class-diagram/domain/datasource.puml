@startuml
package datasource {
    interface IBookDatasource {
        + GetBookByIsbnAsync(long isbn): Task<Book?>
        + GetBooksByTitleAsync(string title, int offset, int limit): Task<IEnumerable<Book>>
        + GetBooksByAuthorAsync(string author, int offset, int limit): Task<IEnumerable<Book>>
        + GetBooksByGenreAsync(BookGenre genre, int offset, int limit): Task<IEnumerable<Book>>
        + GetBooksByPublicationYearAsync(DateTime publicationYear, int offset, int limit): Task<IEnumerable<Book>>
    }

    interface IPatronDatasource {
        + GetPatronsByNameAsync(string name, int offset, int limit): Task<IEnumerable<Patron>>
        + GetPatronByMembershipAsync(long membership): Task<Patron?>
        + GetPatronsByContactDetailsAsync(long contactDetails, int offset, int limit): Task<IEnumerable<Patron>>
    }

    interface IBorrowDatasource {
        + GetBorrowsByPatron(Guid patronId, int offset, int limit): Task<IEnumerable<Borrow>>
        + GetBorrowsByBook(Guid bookId, int offset, int limit): Task<IEnumerable<Borrow>>
        + GetBorrowsByStatus(BorrowStatus status, int offset, int limit): Task<IEnumerable<Borrow>>
        + GetBorrowsByDueDate(DateTime dueDate, int offset, int limit): Task<IEnumerable<Borrow>>
        + GetBorrowsByBorrowDate(DateTime borrowDate, int offset, int limit): Task<IEnumerable<Borrow>>
    }

    ICrudOperations <.. IBookDatasource
    ICrudOperations <.. IPatronDatasource
    ICrudOperations <.. IBorrowDatasource
}
@enduml
