@startuml
package services {
    interface ISearcher {
        + SearchPatronByName(string searchString, int offset, int limit): IEnumerable<Patron>
        + SearchPatronByMembershipNumber(long searchLong): Task<Patron?>
        + SearchBookByTile(string searchString, int offset, int limit): Task<IEnumerable<Book>>
        + SearchBookByAuthor(string searchString, int offset, int limit): Task<IEnumerable<Book>>
        + SearchBookByIsbn(long searchString): Task<Book?>
    }

    interface IReport<T> {
        + GenerateReport(T entity, int offset, int limit): Task<string>
    }

    interface IMapper<out T, in TK> {
        + {static} ToEntity(TK response): T
    }

    interface ICrudOperations<T extends IEntity> {
        + CreateAsync(T entity): Task<T>
        + ReadAsync(Guid id): Task<T?>
        + UpdateAsync(T entity): Task<T>
        + DeleteAsync(Guid id): Task<bool>
        + GetAllAsync(int offset, int limit): Task<IEnumerable<T>>
    }
}
@enduml

